import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import Script from 'next/script'
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
    <head>
      <>
        <Script
            id="splunk-rum-init"
            strategy="beforeInteractive"
            dangerouslySetInnerHTML={{
              __html: `
                // Example shouldTrack function
                function shouldTrackTraceparent(url) {
                  console.log(':', url);
                  return url.includes('v1/json');
                }
              
                // Save original methods
                const originalOpen = XMLHttpRequest.prototype.open;
                const originalSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;
              
                // Store URL for each XHR instance
                const xhrUrlMap = new WeakMap();
              
                // Override open to capture the URL
                XMLHttpRequest.prototype.open = function (method, url, ...rest) {
                  xhrUrlMap.set(this, url);
                  return originalOpen.call(this, method, url, ...rest);
                };
              
                // Override setRequestHeader
                XMLHttpRequest.prototype.setRequestHeader = function (name, value) {
                  if (name.toLowerCase() === 'traceparent') {
                    const url = xhrUrlMap.get(this) || '';
                    if (!shouldTrackTraceparent(url)) {
                      return;
                    }
                  }
              
                  return originalSetRequestHeader.call(this, name, value);
                };
              `,
            }}
        />
        <Script
            src={`https://cdn.signalfx.com/o11y-gdi-rum/${process.env.NEXT_PUBLIC_SPLUNK_CDN_VERSION}/splunk-otel-web.js`}
            strategy="beforeInteractive"
            crossOrigin="anonymous"
        />
        <Script
            id="splunk-rum-init"
            strategy="beforeInteractive"
            dangerouslySetInnerHTML={{
              __html: `
                SplunkRum.init({
                  realm: "${process.env.NEXT_PUBLIC_SPLUNK_REALM}",
                  rumAccessToken: "${process.env.NEXT_PUBLIC_SPLUNK_RUM_ACCESS_TOKEN}",
                  applicationName: "${process.env.NEXT_PUBLIC_SPLUNK_RUM_DEPLOYMENT_ENVIROMENT}",
                  deploymentEnvironment: "${process.env.NEXT_PUBLIC_SPLUNK_RUM_DEPLOYMENT_ENVIROMENT}",
                  debug: false,
                  instrumentations: {
                    fetch: {
                        applyCustomAttributesOnSpan(span) {
                            if(!span.attributes) {
                                // Invalid span context, skip
                                return 
                            }
                            
                            console.log("fetch.applyCustomAttributesOnSpan", span.spanContext().traceId, span);
                            if(shouldTrackTraceparent(span.attributes['http.url'])) {
                                span.setAttribute("link.traceId", span.spanContext().traceId);
                                span.setAttribute("link.spanId", "0000000000000000");
                            } else {
                                console.log("fetch.applyCustomAttributesOnSpan - not tracking traceparent for", span);
                            }
                        }
                    },
                    xhr: {
                        applyCustomAttributesOnSpan(span) {
                            if(!span.attributes) {
                                // Invalid span context, skip
                                return 
                            }
                            
                            console.log("xhr.applyCustomAttributesOnSpan", span.spanContext().traceId, span);
                            if(shouldTrackTraceparent(span.attributes['http.url'])) {
                                span.setAttribute("link.traceId", span.spanContext().traceId);
                                span.setAttribute("link.spanId", "0000000000000000");
                            } else {
                                console.log("xhr.applyCustomAttributesOnSpan - not tracking traceparent for", span);
                            }
                        }
                    }
                  }
                });
              `,
            }}
        />
        <Script
            src={`https://cdn.signalfx.com/o11y-gdi-rum/${process.env.NEXT_PUBLIC_SPLUNK_CDN_VERSION}/splunk-otel-web-session-recorder.js`}
            strategy="beforeInteractive"
            crossOrigin="anonymous"
        />
        <Script
            id="splunk-rum-init"
            strategy="beforeInteractive"
            dangerouslySetInnerHTML={{
              __html: `
                  SplunkSessionRecorder.init({
                      realm: "${process.env.NEXT_PUBLIC_SPLUNK_REALM}",
                      rumAccessToken: "${process.env.NEXT_PUBLIC_SPLUNK_RUM_ACCESS_TOKEN}"
                  });
              `,
            }}
        />
      </>
    </head>
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        {children}
      </body>
    </html>
  );
}
